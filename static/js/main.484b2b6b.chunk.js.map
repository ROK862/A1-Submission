{"version":3,"sources":["utils/helpers.js","components/documentation/DocumentComponent.js","components/generic/Loading.js","components/buttons/ActionButton.js","components/buttons/AnchorButton.js","components/Inputs/Options.js","components/generic/DisplayBreaks.js","components/generic/DisplayRounds.js","components/Inputs/Input.js","audio/SoundEffect.js","components/generic/TimerDisplay.js","components/generic/PauseDisplay.js","components/generic/TimerGoal.js","components/timers/Stopwatch.js","components/timers/Countdown.js","components/generic/DigitalRounds.js","components/timers/XY.js","components/timers/Tabata.js","context/Consts.js","context/AppProvider.js","components/generic/DigitalWatch.js","views/DocumentationView.js","views/TimersView.js","App.js","index.js"],"names":["hex","module","exports","sys","onConvertToSeconds","hours","minutes","seconds","parseInt","onConvertToTime","input","dateTime","Date","setSeconds","timeVal","toISOString","substr","ex","getKey","len","output","i","charAt","Math","floor","random","length","Wrapper","styled","div","Container","Title","RenderComponent","Documentation","table","DocumentComponent","this","props","title","component","propDocs","map","doc","prop","description","type","defaultValue","React","Component","sizeMapping","small","medium","large","Dot","span","size","color","DotGroup","Loading","defaultProps","getButtonTitle","Helper","info","defaultButtonAction","console","log","ActionButton","className","theme","onClick","name","AnchorButton","Options","onChange","e","target","value","current","options","DisplayBreaks","Array","keys","onSetHours","onSetMinutes","onSetSeconds","DisplayRounds","onSetRounds","onStartTiming","onStopTimer","Input","placeholder","server","clips","paused","timing","default","playAudio","clip","volume","audio","Audio","play","TimerDisplay","useContext","AppContext","currentTimer","rounds","displayTime","formattedTime","onPauseTimer","setTimerStatus","onSkipRound","APP_RENDER_STATES","XY","TABATA","renderState","PauseDisplay","onResumeTimer","onCloseTimer","TimerGoal","alt","src","StopWatch","status","Countdown","DigitalRounds","setRounds","setMinutes","setHours","onSetBreakHours","setBreakHours","onSetBreakMinutes","setBreakMinutes","onSetBreakSeconds","setBreakSeconds","breakHours","breakMinutes","breakSeconds","Tabata","MENU","COUNTDOWN","STOPWATCH","APP_FLOW_STATES","TIMER_REF","RENDER_STATE","APP_TIMERS","subTitle","C","Stopwatch","S","recId","createContext","val","workoutStatus","setWorkoutStatus","setformattedTime","currentTime","setCurrentTime","setOnReachedGoal","workflowState","setWorkflowState","setCurrentTimer","shouldRender","AppProvider","children","useState","useEffect","timer","setTimerToDisplay","onReachedGoal","onCompleteRound","timeout","setTimeout","newTime","clearTimeout","Provider","tis","btis","timeInSeconds","alert","tempDisTime","state","DigitalWatch","currentValues","Timers","Timer","TimerTitle","TimerSubtitle","App","timers","accessToggle","to","exact","path","TimersView","DocumentationView","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.484b2b6b.chunk.js","sourcesContent":["// Add helpers here. This is usually code that is just JS and not React code. Example: write a function that\n// calculates number of minutes when passed in seconds. Things of this nature that you don't want to copy/paste\n// import { Helpers } from \"react-scroll\";\nconst hex = '0123456789ABCDEFGHIJKLMNOP';\n// Create a module i will be using as a handle. Sys seem's short and sexy.\nmodule.exports.sys = () => {};\n\n// Convert time to seconds. Single liner. Hmm. I'm learning.\nmodule.exports.sys.onConvertToSeconds = ({hours, minutes, seconds}) => parseInt((hours * 60) * 60) + parseInt(minutes * 60) + parseInt(seconds);\n\n// Convert to time string. If we reveive an input, which is already in seconds, there should be no need to do additional calculations.\nmodule.exports.sys.onConvertToTime = ({input, hours, minutes, seconds}) =>  {\n  let dateTime = new Date(null);\n  dateTime.setSeconds((input) ? input : module.exports.sys.onConvertToSeconds({hours, minutes, seconds})); // specify value of SECONDS\n  let timeVal = \"\";\n  try{\n    timeVal = dateTime.toISOString().substr(11, 8);\n  } catch (ex) {\n    timeVal = \"00:00:00\";\n  }\n  return timeVal;\n}\n\nmodule.exports.sys.getKey = (len=15) => {\n  let output = '';\n  for (let i = 0; i < len; ++i) {\n    output += hex.charAt(Math.floor(Math.random() * hex.length));\n  }\n  return output;\n}\n\n// Helper Methods\n\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { sys } from \"../../utils/helpers\";\n\nconst Wrapper = styled.div`\n  border: 1px solid #dddddd;\n  margin: 20px 0px;\n  border-radius: 0px;\n  box-shadow: 0px 5px 9px 0px #0000003d;\n  border-bottom: 2px solid #fe6c85;\n`;\n\nconst Container = styled.div`\n  justify-content: center;\n  width: auto;\n  height: 100%;\n  overflow: hidden;\n  background: white;\n  padding: 50px;\n`;\n\nconst Title = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 20px;\n  font-size: 1.3rem;\n`;\n\nconst RenderComponent = styled.div`\nalign-items: center;\n    margin: auto;\n    width: auto;\n    display: table;\n`;\n\nconst Documentation = styled.table``;\n\nclass DocumentComponent extends React.Component {\n  render() {\n    return (\n      <Wrapper key={sys.getKey()}>\n        <Title key={sys.getKey()}>{this.props.title}</Title>\n        <Container key={sys.getKey()}>\n          <RenderComponent key={sys.getKey()}>{this.props.component}</RenderComponent>\n          <Documentation key={sys.getKey()}>\n            <tbody>\n            <tr key={sys.getKey()}>\n              <th key={sys.getKey()}>Prop</th>\n              <th key={sys.getKey()}>Description</th>\n              <th key={sys.getKey()}>Type</th>\n              <th key={sys.getKey()}>Default value</th>\n            </tr>\n            {this.props.propDocs.map((doc) => {\n              return (\n                <tr key={sys.getKey()}>\n                  <td key={sys.getKey()}>{doc.prop}</td>\n                  <td key={sys.getKey()}>{doc.description}</td>\n                  <td key={sys.getKey()}>{doc.type}</td>\n                  <td key={sys.getKey()}>\n                    <code key={sys.getKey()}>{doc.defaultValue}</code>\n                  </td>\n                </tr>\n              );\n            })}\n            </tbody>\n          </Documentation>\n        </Container>\n      </Wrapper>\n    );\n  }\n}\n\nexport default DocumentComponent;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst primaryColor = \"#ffa2bf\";\n\nconst sizeMapping = {\n  small: 10,\n  medium: 14,\n  large: 20,\n};\n\nconst Container = styled.div`\n  animation: spin 1.5s linear infinite;\n\n  @-moz-keyframes spin {\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spin {\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n  @keyframes spin {\n    100% {\n      -webkit-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n  }\n`;\n\nconst Dot = styled.span`\n  display: block;\n  width: ${(props) => props.size}px;\n  height: ${(props) => props.size}px;\n  background-color: ${(props) => props.color};\n  border-radius: 100%;\n  transform: scale(0.75);\n  transform-origin: 50% 50%;\n  opacity: 0.3;\n  animation: wobble 1s ease-in-out infinite;\n\n  @keyframes wobble {\n    0% {\n      border-radius: 25%;\n    }\n    100% {\n      border-radius: 100%;\n    }\n  }\n`;\n\nconst DotGroup = styled.div`\n  display: flex;\n`;\n\nclass Loading extends React.Component {\n  render() {\n    const size = sizeMapping[this.props.size];\n    const { color } = this.props;\n\n    return (\n      <Container>\n        <DotGroup>\n          <Dot size={size} color={color} />\n          <Dot size={size} color={color} />\n        </DotGroup>\n        <DotGroup>\n          <Dot size={size} color={color} />\n          <Dot size={size} color={color} />\n        </DotGroup>\n      </Container>\n    );\n  }\n}\n\nLoading.propTypes = {\n  size: PropTypes.oneOf([\"small\", \"medium\", \"large\"]),\n  color: PropTypes.string,\n};\n\nLoading.defaultProps = {\n  size: \"medium\",\n  color: primaryColor,\n};\n\nexport default Loading;\n","import React from \"react\";\nimport Helper from \"../../utils/helpers\";\n\nconst getButtonTitle = (input) => {\n    if (input) return input;\n    Helper.sys.info(`Hmm, you are missing a title on a button.`);\n    return 'Untitled :)';\n}\n\nconst getClassName = (input) => {\n  if (input) return input;\n  return 'Default-Action-Button';\n}\n\nconst defaultButtonAction = (input) => {\n  return ()=>console.log('Default button action.');\n}\n\nclass ActionButton extends React.Component {\n\n  render() {\n    return <button className={getClassName(this.props.theme)} onClick={this.props.onClick || defaultButtonAction}>{getButtonTitle(this.props.name)}</button>;\n  }\n}\n\n// className getButtonTitle\n\nexport default ActionButton;\n","import React from \"react\";\nimport Helper from \"../../utils/helpers\";\n\nconst getButtonTitle = (input) => {\n    if (input) return input;\n    Helper.sys.info(`Hmm, you are missing a title on a button.`);\n    return 'Untitled :)';\n}\n\nconst getClassName = (input) => {\n    if (input) return input;\n    return 'Default-Anchor-Button';\n}\n\nclass AnchorButton extends React.Component {\n\n  render() {\n    return <button onClick={this.props.onClick} className={getClassName(this.props.theme)}>{getButtonTitle(this.props.name)}</button>;\n  }\n}\n\nexport default AnchorButton;\n","import { Component } from \"react\";\nimport \"./Input.css\";\nimport { sys } from \"../../utils/helpers\";\n\n\n// TODO: Convert to functional component.\nclass Options extends Component {\n  render() {\n    return (\n      <div className=\"Option-Wraper\">\n        <label>{this.props.name}</label>\n        <select\n          onChange={(e) => {\n            this.props.onChange(e.target.value);\n          }}\n          className={this.props.className || \"Default-select\"}\n          value={this.props.current || 0}\n        >\n          {(this.props.options || [\"Nothing found\"]).map((e, i) => {\n            return (\n              <option key={sys.getKey()} value={e}>\n                {e}\n              </option>\n            );\n          })}\n        </select>\n      </div>\n    );\n  }\n}\n\nexport default Options;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Options from \"../Inputs/Options\";\n\nconst Title = styled.div`\nfont-size: 30px;\n`;\n\n// TODO: Convert to functional component,\n// TODO: Access getters and setters using context.\nclass DisplayBreaks extends React.Component {\n    render() {\n        return (\n            <div>\n                <Title>{this.props.name || \"Title\"}</Title>\n                <div className='StopWatch'>\n                    <Options options={[...Array(24).keys()]} onChange={this.props.onSetHours} name='Hours' />\n                    <Options options={[...Array(60).keys()]} onChange={this.props.onSetMinutes} name='Minutes' />\n                    <Options options={[...Array(60).keys()]} onChange={this.props.onSetSeconds} name='Seconds' />\n                </div>\n                <div className='Preview'>\n                    {this.props.onConvertToTime()}\n                </div>\n            </div>\n        )\n    }\n}\n//onSetHours onSetMinutes onSetSeconds onSetRounds onConvertToTime onStartTiming onStopTimer\nexport default DisplayBreaks;","import React from \"react\";\nimport styled from \"styled-components\";\nimport Options from \"../Inputs/Options\";\nimport AnchorButton from \"../buttons/AnchorButton\";\n\nconst Title = styled.div`\nfont-size: 30px;\n`;\n\n\n// TODO: Convert to functional component,\n// TODO: Access getters and setters using context.\nclass DisplayRounds extends React.Component {\n    render() {\n        return (\n            <div>\n                <Title>{this.props.name}</Title>\n                <div className='StopWatch'>\n                    <Options options={[...Array(24).keys()]} onChange={this.props.onSetHours} name='Hours' />\n                    <Options options={[...Array(60).keys()]} onChange={this.props.onSetMinutes} name='Minutes' />\n                    <Options options={[...Array(60).keys()]} onChange={this.props.onSetSeconds} name='Seconds' />\n                </div>\n                <div className='Preview Small'>\n                    <Options options={[...Array(11).keys()]} onChange={this.props.onSetRounds} name='Rounds' />\n                </div>\n                <div className='Preview'>\n                    {this.props.onConvertToTime()}\n                </div>\n                <AnchorButton name='Start timing' onClick={this.props.onStartTiming} />\n                <AnchorButton name='Close Timer' onClick={this.props.onStopTimer} />\n            </div>\n        )\n    }\n}\n//onSetHours onSetMinutes onSetSeconds onSetRounds onConvertToTime onStartTiming onStopTimer\nexport default DisplayRounds;","import { Component } from 'react';\nimport './Input.css';\n\nclass Input extends Component {\n  render() {\n    return (\n      <input\n        onChange={e => {\n          this.props.onChange(e.target.value);\n        }}\n        className=\"Default-input\"\n        placeholder={this.props.placeholder}\n      />\n    );\n  }\n}\n\nexport default Input;\n","import React from \"react\";\nconst server = \"https://raw.githubusercontent.com/prof-tejera/assignment-2-ROK862/main/src/audio/\";\nconst clips = {\n  onClick: `${server}goalVolume01.mp3`,\n  paused: `${server}goalVolume02.mp3`,\n  timing: `${server}goalVolume03.mp3`,\n  default: `${server}goalVolume01.mp3`,\n};\n\n// I am no longer using Hawler due to problems while getting \n// audio url from createObjectURL. Not to mention the inconsistancy.\n// Will leave this here for reference to changes made.\nconst SoundEffect = () => {\n  // deprecated.\n  return <></>;\n};\n\n// New function for playing audio. \n// Clips are predefined, and can only be changed from the [clips] Associative array.\nexport const playAudio = ({clip, volume}) => {\n    const audio = new Audio(clips[clip] || clips.default);\n    audio.volume = volume || 0.25;\n    audio.play();\n}\n\n\n// Still exporting sound effects, because generally, after changes we don't remove code. \n// Old habits die hard. :(\nexport default SoundEffect;\n","import React, { useContext } from \"react\";\nimport AnchorButton from \"../buttons/AnchorButton\";\nimport { AppContext } from \"../../context/AppProvider\";\nimport { APP_RENDER_STATES } from \"../../context/Consts\"\n\nfunction TimerDisplay () {\n  const { currentTimer, rounds, formattedTime:displayTime, setTimerStatus:onPauseTimer, onSkipRound } = useContext(AppContext);\n\n\n  const renderState = () => {\n\n    switch (currentTimer) {\n      case APP_RENDER_STATES.XY:\n      case APP_RENDER_STATES.TABATA:\n        return (\n        <div className=\"Content-Wraper\">\n          <div className='StopWatch'>\n            {displayTime}\n          </div>\n          <pre className='Rounds-Preview'>\n            Rounds: {rounds}\n          </pre>\n          <AnchorButton name='Pause' onClick={() => onPauseTimer(\"paused\")} />\n          <AnchorButton name='Next Round' onClick={() => onSkipRound()} />\n        </div>\n        );\n      default:\n        return (\n        <div className=\"Content-Wraper\">\n          <div className='StopWatch'>\n            {displayTime}\n          </div>\n          <AnchorButton name='Pause' onClick={() => onPauseTimer(\"paused\")} />\n        </div>\n        );\n    }\n  }\n  return (\n    <>\n      {renderState()}\n    </>\n  );\n}\n\nexport default TimerDisplay","import React, { useContext } from \"react\";\nimport AnchorButton from \"../buttons/AnchorButton\";\nimport { AppContext } from \"../../context/AppProvider\";\n\nfunction PauseDisplay () {\n  // Simplify the code in parent component by getting getters and setters straigt from context\n  // At this level, i think it is still manage-able. However, you'll be the judge of it :).\n  const { formattedTime:displayTime, setTimerStatus:onResumeTimer, onStopTimer:onCloseTimer } = useContext(AppContext);\n  return (\n    <div className=\"Content-Wraper\">\n      <div className=\"StopWatch\">{displayTime}</div>\n      <AnchorButton name=\"Resume Timer\" onClick={() => onResumeTimer(\"timing\")} />\n      <AnchorButton name=\"Reset Timer\" onClick={onCloseTimer} />\n    </div>\n  );\n}\n\nexport default PauseDisplay;\n","import React, { useContext } from \"react\";\nimport AnchorButton from \"../buttons/AnchorButton\";\nimport { AppContext } from \"../../context/AppProvider\";\n\nfunction TimerGoal () {\n  const { setTimerStatus } = useContext(AppContext);\n\n  return (\n    <>\n      <div className=\"Timer-Goal-Wraper\">\n        <img alt=\"timer-goal\" src=\"https://raw.githubusercontent.com/prof-tejera/assignment-2-ROK862/main/src/images/goal-reached-animation.gif\" />\n      </div>\n      <AnchorButton name=\"Reset Timer\" onClick={()=>setTimerStatus(\"active\")} />\n    </>\n  );\n}\n\nexport default TimerGoal","import React, { useContext } from \"react\";\nimport AnchorButton from \"../buttons/AnchorButton\";\nimport DigitalWatch from \"../generic/DigitalWatch\";\nimport TimerDisplay from \"../generic/TimerDisplay\";\nimport PauseDisplay from \"../generic/PauseDisplay\";\nimport { AppContext } from \"../../context/AppProvider\";\nimport TimerGoal from \"../generic/TimerGoal\";\n\nconst StopWatch = () => {\n\n  // Import context getters and setters from the Store,\n  // This will work similar to useState. However, all objects are passed down\n  // by reference, to the timer component.\n  const { status, setTimerStatus, currentTimer } = useContext(AppContext);\n\n  // Manage what the user see's at any given state.\n  // Useful way to reduce complexity associated with interfaces is to reduce actions\n  // into managable steps.\n\n  // Notice, each stage renders an independent component in itself, and passes setters down\n  // to allow for easy update of state values.\n\n  // Needed to simplify my approuch by breaking down my code into reusable componets.\n  // Default state displays [nothing to tender.]\n\n  // I simplified the render state function to reduce the amound of data that is passed back\n  // and forth between children and parent component.\n  const renderState = () => {\n    switch (status) {\n      case \"inactive\":\n        return (\n          <AnchorButton\n            name=\"Start Now\"\n            onClick={() => setTimerStatus(\"active\")}\n          />\n        );\n      case \"active\":\n        return (\n          <DigitalWatch />\n        );\n      case \"paused\":\n        return (\n          <PauseDisplay />\n        );\n      case \"timing\":\n        return (\n          <TimerDisplay />\n        );\n      case \"complete\":\n        return (\n          <TimerGoal />\n        );\n      default:\n        return <div>nothing to render</div>;\n    }\n  };\n\n  // This is the actual render. Lets just return the title, and call on the\n  // renderState method to give us an appropriate render based on the current state.\n  return (\n    <div className={\"Default-Pink-Theme\"}>\n      <div className=\"Component-Title\">{currentTimer}</div>\n      {renderState()}\n    </div>\n  );\n};\n\nexport default StopWatch;\n","import React, { useContext } from \"react\";\nimport AnchorButton from \"../buttons/AnchorButton\";\nimport DigitalWatch from \"../generic/DigitalWatch\";\nimport TimerDisplay from \"../generic/TimerDisplay\";\nimport PauseDisplay from \"../generic/PauseDisplay\";\nimport { AppContext } from \"../../context/AppProvider\";\nimport TimerGoal from \"../generic/TimerGoal\";\n\nconst Countdown = () => {\n\n  // Import context getters and setters from the Store,\n  // This will work similar to useState. However, all objects are passed down\n  // by reference, to the timer component.\n  const { status, setTimerStatus, currentTimer } = useContext(AppContext);\n  // Manage what the user see's at any given state.\n  // Useful way to reduce complexity associated with interfaces is to reduce actions\n  // into managable steps.\n\n  // Notice, each stage renders an independent component in itself, and passes setters down\n  // to allow for easy update of state values.\n\n  // Needed to simplify my approuch by breaking down my code into reusable componets.\n  // Default state displays [nothing to tender.]\n\n  // I simplified the render state function to reduce the amound of data that is passed back\n  // and forth between children and parent components.\n  const renderState = () => {\n    switch (status) {\n      case \"inactive\":\n        return (\n          <AnchorButton\n            name=\"Start Now\"\n            onClick={() => setTimerStatus(\"active\")}\n          />\n        );\n      case \"active\":\n        return (\n          <DigitalWatch />\n        );\n      case \"paused\":\n        return (\n          <PauseDisplay />\n        );\n      case \"timing\":\n        return (\n          <TimerDisplay />\n        );\n      case \"complete\":\n        return (\n          <TimerGoal />\n        );\n      default:\n        return <div>nothing to render</div>;\n    }\n  };\n\n  // This is the actual render. Lets just return the title, and call on the\n  // renderState method to give us an appropriate render based on the current state.\n  return (\n    <div className={\"Default-Pink-Theme\"}>\n      <div className=\"Component-Title\">{currentTimer}</div>\n      {renderState()}\n    </div>\n  );\n};\n\nexport default Countdown;\n","import React, { useContext } from \"react\";\nimport Options from \"../Inputs/Options\";\nimport AnchorButton from \"../buttons/AnchorButton\";\nimport { AppContext } from \"../../context/AppProvider\";\nimport { APP_RENDER_STATES } from \"../../context/Consts\"\n\nfunction DigitalRounds () {\n  // Simplify the code in parent component by getting getters and setters straigt from context\n  // At this level, i think it is still manage-able. However, you'll be the judge of it :).\n  const { currentTimer, setRounds, formattedTime:displayTime, onStartTiming, onStopTimer:onCloseTimer, setSeconds:onSetSeconds, setMinutes:onSetMinutes, setHours:onSetHours } = useContext(AppContext);\n  const { rounds, hours, minutes, seconds } = useContext(AppContext);\n  const { setBreakHours:onSetBreakHours, setBreakMinutes:onSetBreakMinutes, setBreakSeconds:onSetBreakSeconds } = useContext(AppContext);\n  const { breakHours, breakMinutes, breakSeconds } = useContext(AppContext);\n  const renderState = () => {\n\n    switch (currentTimer) {\n      case APP_RENDER_STATES.XY:\n        return (\n        <div className=\"Content-Wraper\">\n            <pre className=\"Title-Wraper\">Workout Duration</pre>\n            <div className=\"StopWatch\">\n              <Options\n                options={[...Array(24).keys()]}\n                onChange={onSetHours}\n                current={hours || 0}\n                name=\"Hours\"\n              />\n              <Options\n                options={[...Array(60).keys()]}\n                onChange={onSetMinutes}\n                current={minutes || 0}\n                name=\"Minutes\"\n              />\n              <Options\n                options={[...Array(60).keys()]}\n                onChange={onSetSeconds}\n                current={seconds || 0}\n                name=\"Seconds\"\n              />\n            </div>\n            <pre className=\"Title-Wraper\">Break Duration</pre>\n            <div className=\"StopWatch\">\n              <Options\n                options={[...Array(24).keys()]}\n                onChange={onSetBreakHours}\n                current={breakHours || 0}\n                name=\"Hours\"\n              />\n              <Options\n                options={[...Array(60).keys()]}\n                onChange={onSetBreakMinutes}\n                current={breakMinutes || 0}\n                name=\"Minutes\"\n              />\n              <Options\n                options={[...Array(60).keys()]}\n                onChange={onSetBreakSeconds}\n                current={breakSeconds || 0}\n                name=\"Seconds\"\n              />\n            </div>\n\n            <div className=\"Preview\">\n              <br />\n              <Options\n                options={[...Array(30).keys()]}\n                onChange={setRounds}\n                current={rounds || 0}\n                name=\"Rounds\"\n              />\n            </div>\n            <AnchorButton name=\"Start timing\" onClick={onStartTiming} />\n            <AnchorButton name=\"Close Timer\" onClick={onCloseTimer} />\n        </div>\n        );\n      default:\n        return (\n        <div className=\"Content-Wraper\">\n            <div className=\"StopWatch\">\n              <Options\n                options={[...Array(24).keys()]}\n                onChange={onSetHours}\n                current={hours || 0}\n                name=\"Hours\"\n              />\n              <Options\n                options={[...Array(60).keys()]}\n                onChange={onSetMinutes}\n                current={minutes || 0}\n                name=\"Minutes\"\n              />\n              <Options\n                options={[...Array(60).keys()]}\n                onChange={onSetSeconds}\n                current={seconds || 0}\n                name=\"Seconds\"\n              />\n            </div>\n            <div className=\"Preview\">\n              {displayTime || \"00:00:00:00\"}\n              <Options\n                options={[...Array(30).keys()]}\n                onChange={setRounds}\n                current={rounds || 0}\n                name=\"Rounds\"\n              />\n            </div>\n            <AnchorButton name=\"Start timing\" onClick={onStartTiming} />\n            <AnchorButton name=\"Close Timer\" onClick={onCloseTimer} />\n        </div>\n        );\n    }\n  }\n  return (\n    <>\n      {renderState()}\n    </>\n  );\n}\n\nexport default DigitalRounds","import React, { useContext } from \"react\";\nimport AnchorButton from \"../buttons/AnchorButton\";\nimport DigitalRounds from \"../generic/DigitalRounds\";\nimport TimerDisplay from \"../generic/TimerDisplay\";\nimport PauseDisplay from \"../generic/PauseDisplay\";\nimport { AppContext } from \"../../context/AppProvider\";\nimport TimerGoal from \"../generic/TimerGoal\";\n\nconst XY = () => {\n\n  // Import context getters and setters from the Store,\n  // This will work similar to useState. However, all objects are passed down\n  // by reference, to the timer component.\n  const { status, setTimerStatus, currentTimer } = useContext(AppContext);\n\n  // Manage what the user see's at any given state.\n  // Useful way to reduce complexity associated with interfaces is to reduce actions\n  // into managable steps.\n\n  // Notice, each stage renders an independent component in itself, and passes setters down\n  // to allow for easy update of state values.\n\n  // Needed to simplify my approuch by breaking down my code into reusable componets.\n  // Default state displays [nothing to tender.]\n  const renderState = () => {\n    switch (status) {\n      case \"inactive\":\n        return (\n          <AnchorButton\n            name=\"Start Now\"\n            onClick={() => setTimerStatus(\"active\")}\n          />\n        );\n      case \"active\":\n        return (\n          <DigitalRounds />\n        );\n      case \"paused\":\n        return (\n          <PauseDisplay />\n        );\n      case \"timing\":\n        return (\n          <TimerDisplay />\n        );\n      case \"complete\":\n        return (\n          <TimerGoal />\n        );\n      default:\n        return <div>nothing to render</div>;\n    }\n  };\n\n  // This is the actual render. Lets just return the title, and call on the\n  // renderState method to give us an appropriate render based on the current state.\n  return (\n    <div className={\"Default-Pink-Theme\"}>\n      <div className=\"Component-Title\">{currentTimer}</div>\n      {renderState()}\n    </div>\n  );\n};\n\nexport default XY;\n","import React, { useContext } from \"react\";\nimport AnchorButton from \"../buttons/AnchorButton\";\nimport DigitalRounds from \"../generic/DigitalRounds\";\nimport TimerDisplay from \"../generic/TimerDisplay\";\nimport PauseDisplay from \"../generic/PauseDisplay\";\nimport { AppContext } from \"../../context/AppProvider\";\nimport TimerGoal from \"../generic/TimerGoal\";\n\nconst Tabata = () => {\n\n  // Import context getters and setters from the Store,\n  // This will work similar to useState. However, all objects are passed down\n  // by reference, to the timer component.\n  const { status, setTimerStatus, currentTimer } = useContext(AppContext);\n\n  // Manage what the user see's at any given state.\n  // Useful way to reduce complexity associated with interfaces is to reduce actions\n  // into managable steps.\n\n  // Notice, each stage renders an independent component in itself, and passes setters down\n  // to allow for easy update of state values.\n\n  // Needed to simplify my approuch by breaking down my code into reusable componets.\n  // Default state displays [nothing to tender.]\n\n  // I simplified the render state function to reduce the amound of data that is passed back\n  // and forth between children and parent component.\n  const renderState = () => {\n    switch (status) {\n      case \"inactive\":\n        return (\n          <AnchorButton\n            name=\"Start Now\"\n            onClick={() => setTimerStatus(\"active\")}\n          />\n        );\n      case \"active\":\n        return (\n          <DigitalRounds />\n        );\n      case \"paused\":\n        return (\n          <PauseDisplay />\n        );\n      case \"timing\":\n        return (\n          <TimerDisplay />\n        );\n      case \"complete\":\n        return (\n          <TimerGoal />\n        );\n      default:\n        return <div>nothing to render</div>;\n    }\n  };\n\n  // This is the actual render. Lets just return the title, and call on the\n  // renderState method to give us an appropriate render based on the current state.\n  return (\n    <div className={\"Default-Pink-Theme\"}>\n      <div className=\"Component-Title\">{currentTimer}</div>\n      {renderState()}\n    </div>\n  );\n};\n\nexport default Tabata;\n","import Stopwatch from \"../components/timers/Stopwatch\";\nimport Countdown from \"../components/timers/Countdown\";\nimport XY from \"../components/timers/XY\";\nimport Tabata from \"../components/timers/Tabata\";\n\n// Deprecated module. Please ignore for now.\nexport const APP_RENDER_STATES = {\n  MENU: \"Timer Menu\",\n  TABATA: \"TABATA Timer\",\n  COUNTDOWN: \"COUNTDOWN Timer\",\n  STOPWATCH: \"STOPWATCH Timer\",\n  XY: \"XY Timer\",\n};\n\nexport const APP_FLOW_STATES = {\n  WORKOUT: \"Workout Timer\",\n  REST: \"Rest Timer\"\n};\n\nlet TIMER_REF = {\n  RENDER_STATE: \"COUNTDOWN Timer\",\n};\n\nexport const APP_TIMERS = [\n  { title: \"Time your training with a stop watch.\", subTitle: \"Let's get you started with a normal timed session. Time your workout and get feedback from the app in realtime.\", C: <Stopwatch />, S:APP_RENDER_STATES.STOPWATCH },\n  { title: \"Set a timed goal, and track your progress.\", subTitle: \"Be proactive! Let's prepare your training session by setting timed goals.\", C: <Countdown recId={1} />, S:APP_RENDER_STATES.COUNTDOWN },\n  { title: \"Goal driven session, with rounds.\", subTitle: \"Awesome, now let's take this a step further. Set timed goals with multiple rounds.\", C: <XY />, S:APP_RENDER_STATES.XY },\n  { title: \"Now, we need to pace your training.\", subTitle: \"Take a training session with breaks across measurable intervals.\", C: <Tabata />, S:APP_RENDER_STATES.TABATA },\n];\n\n// depricated module, please ignore for now.\n// Code has been moved to AppProvider and is now handled with context.\nexport const shouldRender = ({ state }) => {\n  return false;\n};\n\nexport const setTimerToDisplay = ({timer}) => {\n  TIMER_REF.RENDER_STATE = APP_RENDER_STATES[timer] || APP_RENDER_STATES.COUNTDOWN;\n}\n","import React, { useState, useEffect } from \"react\";\nimport { sys } from \"../utils/helpers\";\nimport { playAudio } from \"../audio/SoundEffect\";\nimport { APP_RENDER_STATES, APP_FLOW_STATES, setTimerToDisplay } from \"./Consts\";\n\n\n// Presets for the AppContext. \n// This list will grow exponentially as the application grows.\n\n// Still thinking of ways to manage this better.\n\nexport const AppContext = React.createContext({\n  status: \"inactive\",\n  setTimerStatus: (val) => {},\n  hours: 0,\n  setHours: (val) => {},\n  minutes: 0,\n  setMinutes: (val) => {},\n  seconds: 0,\n  setSeconds: (val) => {},\n  breakHours: 0,\n  setBreakHours: (val) => {},\n  breakMinutes: 0,\n  setBreakMinutes: (val) => {},\n  breakSeconds: 0,\n  setBreakSeconds: (val) => {},\n  workoutStatus: \"\",\n  setWorkoutStatus: (val) => {},\n  formattedTime: \"\",\n  setformattedTime: (val) => {},\n  currentTime: \"\",\n  setCurrentTime: (val) => {},\n  setOnReachedGoal: () => {},\n  onStartTiming: (val) => {},\n  onStopTimer: (val) => {},\n  workflowState: \"Workout\",\n  setWorkflowState: (val) => {},\n  currentTimer: APP_RENDER_STATES.COUNTDOWN,\n  setCurrentTimer: (val) => {},\n  shouldRender: (val) => {},\n  rounds: 0, \n  setRounds: (val) => {},\n  onSkipRound: (val) => {}\n});\n\n\n// I decided to move all the effects up one level to the global context.\n// That is, all effects will be handled with context. DRY. [ :) ]\nconst AppProvider = ({ children }) => {\n  const [status, setTimerStatus] = useState(\"inactive\");\n  const [hours, setHours] = useState(0);\n  const [minutes, setMinutes] = useState(0);\n  const [seconds, setSeconds] = useState(0);\n  const [rounds, setRounds] = useState(0);\n  const [breakHours, setBreakHours] = useState(0);\n  const [breakMinutes, setBreakMinutes] = useState(0);\n  const [breakSeconds, setBreakSeconds] = useState(0);\n  const [workoutStatus, setWorkoutStatus] = useState(\"Workout\");\n  const [formattedTime, setformattedTime] = useState(\"\");\n  const [currentTime, setCurrentTime] = useState(\"\");\n  const [workflowState, setWorkflowState] = useState(APP_FLOW_STATES.WORKOUT);\n  const [currentTimer, setCurrentTimer] = useState(APP_RENDER_STATES.COUNTDOWN);\n\n  const shouldRender = ({ state }) => currentTimer === state;\n\n  useEffect(() => {\n    const formattedTime = sys.onConvertToTime({\n      hours,\n      minutes,\n      seconds,\n    });\n    setformattedTime(formattedTime);\n  }, [hours, minutes, seconds]);\n\n  // Update constants for timer to render.\n  // Perhaps not the best approuch, since i have values for currentTimer to display\n  // within the context, and it's shared accross the application.\n  \n  // Hmm, Will think about this approuch.\n\n  /* CHANGE IMPLEMENTED */\n  /*---------------------------------------------------------------------------------------------*/ \n  // TO-WIT: Changed access to currentTimer. This is now handle with context.\n  // That is, all components access this value from AppContext Provider, instead of const globals.\n  // Notice, the value is still kept in a global const. However, a copy of it is accessable with context.\n  useEffect(() => {\n    setTimerToDisplay(currentTimer);\n  }, [currentTimer]);\n\n  // Handle Stop Timer button onclick here.\n  const onStopTimer = () => {\n    const tempDisTime = sys.onConvertToTime({\n      hours,\n      minutes,\n      seconds,\n    });\n    setTimerStatus(\"inactive\");\n    setformattedTime(tempDisTime);\n    setCurrentTime(0);\n    playAudio({ clip: \"onClick\" });\n  };\n\n  // Handle start timing button onclick here.\n  const onStartTiming = () => {\n    // Time in seconds for main timer\n    const tis = sys.onConvertToSeconds({ hours, minutes, seconds });\n    // Time in seconds for break timer.\n    const btis = sys.onConvertToSeconds({ breakHours, breakMinutes, breakSeconds });\n\n    // Validation of inputs for all components.\n    if (tis === 0) {\n      alert(\"Please make sure you set the time limits before continuing.\")\n      return;\n    } else if (currentTimer === APP_RENDER_STATES.XY && btis === 0) {\n      alert(\"Please make sure you specify break duration before continuing.\")\n      return;\n    } else if (currentTimer === APP_RENDER_STATES.XY && rounds === 0) {\n      alert(\"Please make sure you set timer rounds limits before continuing.\")\n      return;\n    }\n\n    let timeInSeconds = 0;\n    if (currentTimer === APP_RENDER_STATES.COUNTDOWN) {\n      timeInSeconds = tis;\n    }\n\n    setTimerStatus(\"timing\");\n    setCurrentTime(timeInSeconds);\n    playAudio({ clip: \"timing\" });\n  };\n\n  // Any action on reach goal comes here, that is, once the timer reaches\n  // it's target value, negative or positive.\n  const onReachedGoal = () => {\n    setTimerStatus(\"complete\");\n    playAudio({ clip: \"onClick\" });\n  };\n\n  // Any action on round complete comes here before next render.\n  const onCompleteRound = () => {\n    playAudio({ clip: \"onClick\" });\n  }\n\n  const onSkipRound = () => {\n    if (currentTimer !== APP_RENDER_STATES.TABATA || currentTimer === APP_RENDER_STATES.XY) return;\n    setRounds(rounds - 1);\n    setWorkflowState(APP_FLOW_STATES.WORKOUT);\n    onCompleteRound();\n    setformattedTime(formattedTime);\n    setCurrentTime(0);\n  }\n\n  // This hook handles the tick function, and cleanup of interval before next render.\n  useEffect(() => {\n    // Check if we are allowed to start the tick function.\n    // Prevent subscription from executing every time.\n    if (status !== \"timing\") return;\n\n    const timeout = setTimeout(() => {\n      let newTime = (currentTimer === APP_RENDER_STATES.COUNTDOWN) ? currentTime - 1.0 : currentTime + 1.0;\n      \n      // Test and return the right timer based on the APP_RENDER_STATES and APP_FLOW_STATES.\n      // Notice, target time changes based on currentTimer and workflowState.\n      // Also, it's cleaner to manage everything here.\n      const target = \n      (currentTimer === APP_RENDER_STATES.XY) ? \n      (workflowState === APP_FLOW_STATES.REST) ? \n      (sys.onConvertToSeconds({ hours:breakHours, minutes:breakMinutes, seconds:breakSeconds })) : \n      (sys.onConvertToSeconds({ hours, minutes, seconds })) : \n      (sys.onConvertToSeconds({ hours, minutes, seconds }));\n\n      // Test if the timer has reached its goal.\n      if (newTime < 0 && currentTimer === APP_RENDER_STATES.COUNTDOWN) {\n        onReachedGoal();\n        return;\n      } else if (newTime >= target && currentTimer === APP_RENDER_STATES.STOPWATCH) {\n        onReachedGoal();\n        return;\n      }  else if (newTime >= target && currentTimer === APP_RENDER_STATES.TABATA) {\n        if (workflowState === APP_FLOW_STATES.WORKOUT) {\n          setWorkflowState(APP_FLOW_STATES.REST);\n          newTime = 0;\n        } else if (rounds > 0) {\n          setRounds(rounds - 1);\n          newTime = 0;\n          onCompleteRound();\n        } else {\n          onReachedGoal();\n          return;\n        }\n        \n      } else if (newTime >= target && currentTimer === APP_RENDER_STATES.XY) {\n        if (workflowState === APP_FLOW_STATES.WORKOUT) {\n          setWorkflowState(APP_FLOW_STATES.REST);\n          newTime = 0;\n        } else if (rounds > 0) {\n          setRounds(rounds - 1);\n          newTime = 0;\n          setWorkflowState(APP_FLOW_STATES.WORKOUT);\n          onCompleteRound();\n        } else {\n          setWorkflowState(APP_FLOW_STATES.WORKOUT);\n          onReachedGoal();\n          return;\n        }\n        \n      }\n\n      // Set the display time, which is to be use for display in the digital watch display.\n      const formattedTime = sys.onConvertToTime({ input: newTime });\n\n      // Set state values for formated time, and new current time.\n      setformattedTime(formattedTime);\n      setCurrentTime(newTime);\n    }, 1000);\n\n    return () => {\n      // Lets clean up the timeout object to avoid memory leaking.\n      clearTimeout(timeout);\n    };\n    // Monitor both the current time and status to alsp\n    // allow trigger once the status changes back to timing.\n\n    // At this point, I'm only adding additional dependencies to avoid useEffect dependency hell.\n    // Will need to review this part of the code.\n    // I do controll executions of this subscription though, on top level. So, this should work.\n  }, [currentTime, status, currentTimer, hours, minutes, seconds, workflowState, rounds, breakHours, breakMinutes, breakSeconds]);\n\n\n  // Pass getters and setters down to child components.\n  return (\n    <AppContext.Provider\n      value={{\n        status,\n        setTimerStatus,\n        hours,\n        setHours,\n        minutes,\n        setMinutes,\n        seconds,\n        setSeconds,\n        breakHours,\n        setBreakHours,\n        breakMinutes,\n        setBreakMinutes,\n        breakSeconds,\n        setBreakSeconds,\n        workoutStatus,\n        setWorkoutStatus,\n        formattedTime,\n        setformattedTime,\n        currentTime,\n        setCurrentTime,\n        onStartTiming,\n        onStopTimer,\n        workflowState,\n        setWorkflowState,\n        currentTimer,\n        setCurrentTimer,\n        shouldRender,\n        rounds, \n        setRounds,\n        onSkipRound,\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport default AppProvider;\n","import React, { useContext } from \"react\";\nimport Options from \"../Inputs/Options\";\nimport AnchorButton from \"../buttons/AnchorButton\";\nimport { AppContext } from \"../../context/AppProvider\";\n\nfunction DigitalWatch () {\n  // Simplify the code in parent component by getting getters and setters straigt from context\n  // At this level, i think it is still manage-able. However, you'll be the judge of it :).\n  const { formattedTime:displayTime, onStartTiming, onStopTimer:onCloseTimer, setSeconds:onSetSeconds, setMinutes:onSetMinutes, setHours:onSetHours } = useContext(AppContext);\n  const { hours, minutes, seconds } = useContext(AppContext);\n  \n  return (\n      <div className=\"Content-Wraper\">\n          <div className=\"StopWatch\">\n            <Options\n              options={[...Array(24).keys()]}\n              onChange={onSetHours}\n              current={hours || 0}\n              name=\"Hours\"\n            />\n            <Options\n              options={[...Array(60).keys()]}\n              onChange={onSetMinutes}\n              current={minutes || 0}\n              name=\"Minutes\"\n            />\n            <Options\n              options={[...Array(60).keys()]}\n              onChange={onSetSeconds}\n              current={seconds || 0}\n              name=\"Seconds\"\n            />\n          </div>\n          <div className=\"Preview\">\n            {displayTime || \"00:00:00:00\"}\n          </div>\n          <AnchorButton name=\"Start timing\" onClick={onStartTiming} />\n          <AnchorButton name=\"Close Timer\" onClick={onCloseTimer} />\n        </div>\n    );\n}\n\nexport default DigitalWatch","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport DocumentComponent from \"../components/documentation/DocumentComponent\";\n\nimport Loading from \"../components/generic/Loading\";\nimport ActionButton from \"../components/buttons/ActionButton\";\nimport AnchorButton from \"../components/buttons/AnchorButton\";\nimport DisplayBreaks from \"../components/generic/DisplayBreaks\";\nimport DisplayRounds from \"../components/generic/DisplayRounds\";\nimport Input from \"../components/Inputs/Input\";\nimport Options from \"../components/Inputs/Options\";\nimport DisplayWatch from \"../components/generic/DigitalWatch\";\nimport PauseDisplay from \"../components/generic/PauseDisplay\";\nimport TimerDisplay from \"../components/generic/TimerDisplay\";\nimport TimerGoal from \"../components/generic/TimerGoal\";\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  overflow: scroll;\n  background: white;\n`;\n\nconst Title = styled.div`\n  font-size: 2rem;\n`;\n\nclass Documentation extends React.Component {\n  render() {\n    return (\n      <Container>\n        <div>\n          <Title>Documentation</Title>\n          <DocumentComponent\n            title=\"Loading spinner \"\n            component={<Loading />}\n            propDocs={[\n              {\n                prop: \"size\",\n                description: \"Changes the size of the loading spinner\",\n                type: \"string\",\n                defaultValue: \"medium\",\n              },\n            ]}\n          />\n          <DocumentComponent\n            title=\"Action Button \"\n            component={<Input name=\"Doc Button\" placeholder=\"Doc Input\" />}\n            propDocs={[\n              {\n                prop: \"onChange\",\n                description: \"onChange event handler passed down from parent component.\",\n                type: \"string\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"className\",\n                description: \"Class name--custom styling.\",\n                type: \"string\",\n                defaultValue: \"Default-input\",\n              },{\n                prop: \"placeholder\",\n                description: \"The placeholder value displayed when component value is empty.\",\n                type: \"string\",\n                defaultValue: \"Required.\",\n              },\n            ]}\n          />\n          <DocumentComponent\n            title=\"Anchor Button \"\n            component={<AnchorButton name=\"Doc Button\" />}\n            propDocs={[\n              {\n                prop: \"className\",\n                description: \"Change button theme.\",\n                type: \"string\",\n                defaultValue: \"Default-Action-Button\",\n              },{\n                prop: \"name\",\n                description: \"Change the title text displayed on the button.\",\n                type: \"string\",\n                defaultValue: \"Untitled :(\",\n              },{\n                prop: \"onClick\",\n                description: \"Button onclick event.\",\n                type: \"string\",\n                defaultValue: \"()=>log..default action\",\n              },\n            ]}\n          />\n          <DocumentComponent\n            title=\"Action Button \"\n            component={<ActionButton name=\"Doc Button\" />}\n            propDocs={[\n              {\n                prop: \"className\",\n                description: \"Change button theme.\",\n                type: \"string\",\n                defaultValue: \"Default-Action-Button\",\n              },{\n                prop: \"name\",\n                description: \"Change the title text displayed on the button.\",\n                type: \"string\",\n                defaultValue: \"Untitled :(\",\n              },{\n                prop: \"onClick\",\n                description: \"Button onclick event.\",\n                type: \"string\",\n                defaultValue: \"()=>log..default action\",\n              },\n            ]}\n          />\n          <DocumentComponent\n            title=\"Action Button \"\n            component={<Options options={[...Array(24).keys()]} onChange={(e=0)=>null} name='Doc Options' />}\n            propDocs={[\n              {\n                prop: \"name\",\n                description: \"The label to be displayed next to the select drop down.\",\n                type: \"string\",\n                defaultValue: \"Untitled :(\",\n              },\n              {\n                prop: \"options\",\n                description: \"An array object used to generate selectable options.\",\n                type: \"string\",\n                defaultValue: \"['Choose an Option']\",\n              },\n              {\n                prop: \"onChange\",\n                description: \"onChange event handler passed down from parent component.\",\n                type: \"string\",\n                defaultValue: \"Required\",\n              },\n            ]}\n          />\n          <DocumentComponent \n            title=\"Display Break\"\n            component={<DisplayBreaks onSetHours={(e=1)=>null} onSetMinutes={(e=1)=>null} onSetSeconds={(e=1)=>null} onSetRounds={(e=1)=>null} onConvertToTime={(e=1)=>\"00:00:00\"} onStartTiming={(e=1)=>null} onStopTimer={(e=1)=>null} />}\n            propDocs={[\n              {\n                prop: \"name\",\n                description: \"Timer title.\",\n                type: \"string\",\n                defaultValue: \"Title\",\n              },{\n                prop: \"onSetHours\",\n                description: \"onSetHours updates parent state once the hours drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onSetMinutes\",\n                description: \"onSetMinutes updates parent state once the minutes drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onSetSeconds\",\n                description: \"onSetSeconds updates parent state once the seconds drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onConvertToTime\",\n                description: \"onConvertToTime gets the display time string from the parent component.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },\n            ]}\n          />\n         \n         <DocumentComponent \n            title=\"Display Rounds\"\n            component={<DisplayRounds onSetHours={(e=1)=>null} onSetMinutes={(e=1)=>null} onSetSeconds={(e=1)=>null} onSetRounds={(e=1)=>null} onConvertToTime={(e=1)=>\"00:00:00\"} onStartTiming={(e=1)=>null} onStopTimer={(e=1)=>null} />}\n            propDocs={[\n              {\n                prop: \"name\",\n                description: \"Timer title.\",\n                type: \"string\",\n                defaultValue: \"Title\",\n              },{\n                prop: \"onSetHours\",\n                description: \"onSetHours updates parent state once the hours drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onSetMinutes\",\n                description: \"onSetMinutes updates parent state once the minutes drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onSetSeconds\",\n                description: \"onSetSeconds updates parent state once the seconds drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onConvertToTime\",\n                description: \"onConvertToTime gets the display time string from the parent component.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },\n            ]}\n          />\n          <DocumentComponent \n            title=\"Display Watch\"\n            component={<DisplayWatch currentValues={{ hours:0, minutes:0, seconds:0 }} onSetMinutes={(e=1)=>null} onSetSeconds={(e=1)=>null} onSetRounds={(e=1)=>null} onConvertToTime={(e=1)=>\"00:00:00\"} onStartTiming={(e=1)=>null} onStopTimer={(e=1)=>null} />}\n            propDocs={[\n              {\n                prop: \"onSetHours\",\n                description: \"onSetHours updates parent state once the hours drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onSetMinutes\",\n                description: \"onSetMinutes updates parent state once the minutes drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onSetSeconds\",\n                description: \"onSetSeconds updates parent state once the seconds drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onSetRounds\",\n                description: \"onSetRounds updates parent state once the rounds input changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onStartTiming\",\n                description: \"onStartTiming updates parent state once the start timing button has been clicked.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onSetHours\",\n                description: \"onSetHours updates parent state once the hours drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onStopTimer\",\n                description: \"onStopTimer updates parent state once the Stop Timer button is clicked.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },\n            ]}\n          />\n          <DocumentComponent \n            title=\"Timer Display\"\n            component={<TimerDisplay currentValues={{ hours:0, minutes:0, seconds:0 }} onSetHours={(e=1)=>null} onSetMinutes={(e=1)=>null} onSetSeconds={(e=1)=>null} onSetRounds={(e=1)=>null} onConvertToTime={(e=1)=>\"00:00:00\"} onStartTiming={(e=1)=>null} onStopTimer={(e=1)=>null} />}\n            propDocs={[\n              {\n                prop: \"onSetHours\",\n                description: \"onSetHours updates parent state once the hours drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onSetMinutes\",\n                description: \"onSetMinutes updates parent state once the minutes drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onSetSeconds\",\n                description: \"onSetSeconds updates parent state once the seconds drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onSetRounds\",\n                description: \"onSetRounds updates parent state once the rounds input changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onStartTiming\",\n                description: \"onStartTiming updates parent state once the start timing button has been clicked.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onSetHours\",\n                description: \"onSetHours updates parent state once the hours drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onStopTimer\",\n                description: \"onStopTimer updates parent state once the Stop Timer button is clicked.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },\n            ]}\n          />\n          <DocumentComponent \n            title=\"Pause Display\"\n            component={<PauseDisplay />}\n            propDocs={[\n              {\n                prop: \"displayTime\",\n                description: \"PauseDisplay relies on displayTime which is destructured from AppProvider as a contextValue. This field renders time on the screen.\",\n                type: \"string\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onResumeTimer\",\n                description: \"PauseDisplay relies on onResumeTimer which is destructured from AppProvider as a contextValue. onResumeTimer changes state of timer to timing, which intern starts the timer.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onCloseTimer\",\n                description: \"PauseDisplay relies on onCloseTimer which is destructured from AppProvider as a contextValue. This function closes the timer completely, and resets it.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              }\n            ]}\n          />\n\n          <DocumentComponent \n            title=\"Timer Goal\"\n            component={<TimerGoal currentValues={{ hours:0, minutes:0, seconds:0 }} onSetHours={(e=1)=>null} onSetMinutes={(e=1)=>null} onSetSeconds={(e=1)=>null} onSetRounds={(e=1)=>null} onConvertToTime={(e=1)=>\"00:00:00\"} onStartTiming={(e=1)=>null} onStopTimer={(e=1)=>null} />}\n            propDocs={[\n              {\n                prop: \"setTimerStatus\",\n                description: \"Timer Goal relies on setTimerStatus from AppProvider. Timer Goal uses this function to set timer active once user has reached its goal. Called with Reset Button.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },\n            ]}\n          />\n\n          <DocumentComponent \n            title=\"Pause Display\"\n            component={<PauseDisplay currentValues={{ hours:0, minutes:0, seconds:0 }} onSetHours={(e=1)=>null} onSetMinutes={(e=1)=>null} onSetSeconds={(e=1)=>null} onSetRounds={(e=1)=>null} onConvertToTime={(e=1)=>\"00:00:00\"} onStartTiming={(e=1)=>null} onStopTimer={(e=1)=>null} />}\n            propDocs={[\n              {\n                prop: \"onSetHours\",\n                description: \"onSetHours updates parent state once the hours drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onSetMinutes\",\n                description: \"onSetMinutes updates parent state once the minutes drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onSetSeconds\",\n                description: \"onSetSeconds updates parent state once the seconds drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onSetRounds\",\n                description: \"onSetRounds updates parent state once the rounds input changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onStartTiming\",\n                description: \"onStartTiming updates parent state once the start timing button has been clicked.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onSetHours\",\n                description: \"onSetHours updates parent state once the hours drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onStopTimer\",\n                description: \"onStopTimer updates parent state once the Stop Timer button is clicked.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },\n            ]}\n          />\n        </div>\n      </Container>\n    );\n  }\n}\n\nexport default Documentation;\n","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { sys } from \"../utils/helpers\";\nimport AnchorButton from \"../components/buttons/AnchorButton\";\nimport { APP_RENDER_STATES, APP_TIMERS } from \"../context/Consts\";\nimport { AppContext } from \"../context/AppProvider\";\n\nconst Timers = styled.div`\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  display: inline-block;\n`;\n\nconst Timer = styled.div`\n  font-size: 2rem;\n  padding: 2%;\n  background: #fff8fc;\n  margin: 5% auto 5% auto;\n  width: 35%;\n  min-height: 250px;\n  border-radius: 5px;\n  display: block;\n  box-shadow: 10px 30px 40px 5px #0000001a;\n  color: #000000;\n  text-align: center;\n  font-weight: bold;\n  border-bottom: 2px solid #f408a6;\n`;\n\nconst TimerTitle = styled.div`\n  font-size: 1.5rem;\n`;\nconst TimerSubtitle = styled.div`\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  font-size: 15px;\n  padding: 50px;\n  font-weight: 400;\n  padding-top: 15px;\n`;\n\nfunction App() {\n  const timers = APP_TIMERS;\n  const { setCurrentTimer, shouldRender, status } = useContext(AppContext);\n\n  // Mmm. Seem's as though react doesnt like it when i map through an array and generate components without a {key}.\n  // React needs a point of reference to track changes when it does updates.\n  // Hence, i added keys to mapped comps wich basically gives them a unique index.\n  // Code cab be found in helper.js\n\n  const accessToggle = (status === \"timing\") ? \"inactive\" : \"active\";\n  return (\n    <div className={`Workflow-Wraper`}>\n      <div className={`Timer-List ${accessToggle}`}>\n        <AnchorButton\n          name={APP_RENDER_STATES.COUNTDOWN}\n          onClick={() => setCurrentTimer(APP_RENDER_STATES.COUNTDOWN)}\n        />\n        <AnchorButton\n          name={APP_RENDER_STATES.TABATA}\n          onClick={() => setCurrentTimer(APP_RENDER_STATES.TABATA)}\n        />\n        <AnchorButton\n          name={APP_RENDER_STATES.STOPWATCH}\n          onClick={() => setCurrentTimer(APP_RENDER_STATES.STOPWATCH)}\n        />\n        <AnchorButton\n          name={APP_RENDER_STATES.XY}\n          onClick={() => setCurrentTimer(APP_RENDER_STATES.XY)}\n        />\n      </div>\n      <Timers>\n        {timers.map((timer, i) =>\n          shouldRender({ state: timer.S }) ? (\n            <Timer key={sys.getKey()}>\n              <TimerTitle key={sys.getKey()}>{timer.title}</TimerTitle>\n              <TimerSubtitle key={sys.getKey()}>{timer.subTitle}</TimerSubtitle>\n              {timer.C}\n            </Timer>\n          ) : (\n            <div key={sys.getKey()}></div>\n          )\n        )}\n      </Timers>\n      <br />\n      <br />\n      <br />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport DocumentationView from \"./views/DocumentationView\";\nimport TimersView from \"./views/TimersView\";\nimport AppProvider from \"./context/AppProvider\"; \nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nconst Container = styled.div`\n  height: 100vh;\n  display: block;\n  overflow: hidden;\n`;\n\nfunction App() {\n      // Add context Store to the entire application.\n      // Not sure if this is the right way, but should work for my setting.\n      // Looking forward to inputs, perhaps some good old constructive criticism :)\n  return (\n    <AppProvider>\n      <Container>\n        <Router>\n          <nav>\n            <ul>\n              <li>\n                <Link to=\"/A1-Submission/\">Timers</Link>\n              </li>\n              <li>\n                <Link to=\"/A1-Submission/docs\">Documentation</Link>\n              </li>\n            </ul>\n          </nav>\n          <Switch>\n            <Route exact path=\"/A1-Submission/\">\n              <TimersView />\n            </Route>\n            <Route exact path=\"/A1-Submission/docs\">\n              <DocumentationView />\n            </Route>\n          </Switch>\n        </Router>\n      </Container>\n    </AppProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}